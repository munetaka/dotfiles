[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
  elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
  elseif executable('gmake')
    let cmd = 'gmake'
  else
    let cmd = 'make'
  endif
  let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Lokaltog/vim-powerline'

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'Shougo/neocomplcache'

[[plugins]]
repo = 'Shougo/neosnippet.git'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/defx.nvim'
depends = [
  'nvim-yarp',
  'vim-hug-neovim-rpc',
]
hook_add = '''
  nnoremap [defx] <Nop>
  nmap <Leader>f [defx]
  nnoremap <silent> [defx]f :<C-u>Defx -split=vertical -winwidth=40 -direction=topleft -show-ignored-files<CR>

  call defx#custom#column('icon', {
      \ 'directory_icon': '▸',
      \ 'opened_icon': '▾',
      \ 'root_icon': ' ',
      \ })
  call defx#custom#column('filename', {
      \ 'min_width': 40,
      \ 'max_width': 40,
      \ })
  call defx#custom#column('mark', {
      \ 'readonly_icon': '✗',
      \ 'selected_icon': '✓',
      \ })
  autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
      " Define mappings
      nnoremap <silent><buffer><expr> <CR>
      \ defx#is_directory() ?
      \ defx#do_action('open_tree') :
      \ defx#do_action('drop')
      nnoremap <silent><buffer><expr> c
      \ defx#do_action('copy')
      nnoremap <silent><buffer><expr> m
      \ defx#do_action('move')
      nnoremap <silent><buffer><expr> p
      \ defx#do_action('paste')
      nnoremap <silent><buffer><expr> l
      \ defx#do_action('drop')
      nnoremap <silent><buffer><expr> t
      \ defx#do_action('drop', 'tabnew')
      nnoremap <silent><buffer><expr> E
      \ defx#do_action('drop', 'vsplit')
      nnoremap <silent><buffer><expr> P
      \ defx#do_action('open', 'pedit')
      nnoremap <silent><buffer><expr> o
      \ defx#do_action('open_or_close_tree')
      nnoremap <silent><buffer><expr> K
      \ defx#do_action('new_directory')
      nnoremap <silent><buffer><expr> N
      \ defx#do_action('new_file')
      nnoremap <silent><buffer><expr> M
      \ defx#do_action('new_multiple_files')
      nnoremap <silent><buffer><expr> C
      \ defx#do_action('toggle_columns',
      \                'mark:indent:icon:filename:type:size:time')
      nnoremap <silent><buffer><expr> S
      \ defx#do_action('toggle_sort', 'time')
      nnoremap <silent><buffer><expr> d
      \ defx#do_action('remove')
      nnoremap <silent><buffer><expr> r
      \ defx#do_action('rename')
      nnoremap <silent><buffer><expr> !
      \ defx#do_action('execute_command')
      nnoremap <silent><buffer><expr> x
      \ defx#do_action('execute_system')
      nnoremap <silent><buffer><expr> yy
      \ defx#do_action('yank_path')
      nnoremap <silent><buffer><expr> .
      \ defx#do_action('toggle_ignored_files')
      nnoremap <silent><buffer><expr> ;
      \ defx#do_action('repeat')
      nnoremap <silent><buffer><expr> h
      \ defx#do_action('cd', ['..'])
      nnoremap <silent><buffer><expr> ~
      \ defx#do_action('cd')
      nnoremap <silent><buffer><expr> q
      \ defx#do_action('quit')
      nnoremap <silent><buffer><expr> s
      \ defx#do_action('toggle_select') . 'j'
      nnoremap <silent><buffer><expr> *
      \ defx#do_action('toggle_select_all')
      nnoremap <silent><buffer><expr> j
      \ line('.') == line('$') ? 'gg' : 'j'
      nnoremap <silent><buffer><expr> k
      \ line('.') == 1 ? 'G' : 'k'
      nnoremap <silent><buffer><expr> <C-l>
      \ defx#do_action('redraw')
      nnoremap <silent><buffer><expr> <C-g>
      \ defx#do_action('print')
      nnoremap <silent><buffer><expr> cd
      \ defx#do_action('change_vim_cwd')
    endfunction
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
depends = [
  'nvim-yarp',
  'vim-hug-neovim-rpc',
]
hook_source = '''
  " Define mappings
  autocmd FileType denite call s:denite_my_settings()
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
    endfunction
'''

[[plugins]]
repo = 'roxma/nvim-yarp'
on_if = '!has("nvim")'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
on_if = '!has("nvim")'

[[plugins]]
repo = 'leafgarland/typescript-vim'

[[plugins]]
repo = 'kchmck/vim-coffee-script'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
  let g:indent_guides_enable_on_vim_startup=1
  let g:indent_guides_start_level=2
  let g:indent_guides_auto_colors=0
  " 奇数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=#262626 ctermbg=gray
  " 偶数インデントのカラー
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=#3c3c3c ctermbg=darkgray
  " ハイライト色の変化の幅
  let g:indent_guides_color_change_percent = 30
  " ガイドの幅
  let g:indent_guides_guide_size = 1
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
  let g:flake8_ignore = 'E501'
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config._ = {
  \   'runner' : 'vimproc',
  \   'runner/vimproc/updatetime' : 60,
  \   'outputter/buffer/close_on_empty' : 1,
  \ }
'''

[[plugins]]
repo    = 'osyo-manga/shabadou.vim'

[[plugins]]
repo    = 'osyo-manga/vim-watchdogs'
depends = [
  'shabadou.vim',
  'vim-quickrun',
]
on_event = ['FocusLost', 'CursorHold']
hook_add = '''
  let g:watchdogs_check_BufWritePost_enable = 1
  " let g:watchdogs_check_CursorHold_enable = 1
'''
hook_source = '''
  let g:quickrun_config = get(g:, 'quickrun_config', {})
  let g:quickrun_config = {
  \   'python/watchdogs_checker': {
  \     'type' : 'watchdogs_checker/flake8',
  \   }
  \ }
'''
hook_post_source = '''
  call watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'Vimjas/vim-python-pep8-indent'
on_ft = 'python'

[[plugins]] # hybrid
repo = 'w0ng/vim-hybrid'
hook_add = '''
  set background=dark
  " colorscheme 設定は source 後に行う必要があるので VimEnter で行う。
  " 但し Colorscheme イベントの発生が抑制されないよう nented を付ける。
  au MyAutoCmd VimEnter * nested colorscheme hybrid
'''

[[plugins]]
repo    = 'posva/vim-vue'

[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
  " anzu-mode is anzu(12/51) in screen
  nmap n <Plug>(anzu-mode-n)
  nmap N <Plug>(anzu-mode-N)
  " nmap n <Plug>(anzu-n-with-echo)
  " nmap N <Plug>(anzu-N-with-echo)
  nmap * <Plug>(anzu-star-with-echo)
  nmap # <Plug>(anzu-sharp-with-echo)
'''
